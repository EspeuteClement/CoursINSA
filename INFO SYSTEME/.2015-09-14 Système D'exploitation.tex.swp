\documentclass[11pt]{article}

\usepackage{custom}
\usepackage{lipsum}
\usepackage{fancyhdr}
\usepackage{polyglossia}
\setmainlanguage{francais}
%mathieu.maranzana@insa-lyon.fr
\title{Système d'Exploitation}
\author{{\sc Espeute} Clément}
\date{14 septembre 2015}

\begin{document}
\pagestyle{fancy}
\maketitle
\newpage
\tableofcontents
\newpage
\section{Concepts de base dans les Systèmes d'exploitation}
\subsection{Définition}
\label{sub:}
Matériel < \emph{ Système d'exploitation} < Programmes Systèmes ou Applicatifs < Utilisateurs (Personne ou autre ordinateur)

Le système d'exploitation s'occupe de la gestion des conflits (Éviter que n'importe qui n'accède à n'importe quoi (multi tâche), Gérer l'accès au matériel)

Le système agit aussi comme une couche d'abstraction entre le matériel et l'utilisateur

\subsection{Système d'exploitation en temps partagé}
\label{sub:}
Nouvelles exigences -> Logiciens plus complexes

Gestion de la mémoire : protection, mémoire virtuelle.

Gestion de fichiers : répertoires, contrôle d'accès et protection, gestion des disques

Gestion des travaux : ordonnancement -> Changement de contexte, communication et synchronisation des travaux, Interblocage

\subsection{Systèmes d'exploitation en temps réel}
\label{sub:}
Caractéristiques : Contrainte de temps (échéances), Évènement apériodiques ou périodiques, Ordonnancement basé sur les priorités des tâches et sur la préemption.

2 Types !
\subsubsection{Temps réel dur}
Fonction limitées pour assurer la prédicabilité et le déterminisme de l'exécution

Échéances et temps de réponse garantis

\subsubsection{Temps réel mou}
Non respect d'échéances toléré

Notion de qualité de service et de dégradation contrôlée

\subsubsection{Exemples}
LynxOS, RTLinux, WinCE

\section{Modèle TCB}
\subsection{Le modèle tâche}
\label{sub:}
A chaque tâche est associé une structure TCB (Task Control Block)

TCB gère ;
	Valeur des registres
	
	Adresse de la prochaine instruction (\emph{Program counter})
	
	Id tache
	
	États courant d'exec
	
	Priorité
	
	Pointeurs vers le code, donées et pile
	
	Infos sur les autres ressources en cours d'utilisation
	\\
	Il est utilisé pour :
	
	Un ordonnancement temps partagé
	
	
	\subsubsection{Les états d'une tâche}
	Info dans le TCB, donnes des infos sur la tâche
	\begin{itemize}
	\item État latent : Typique du temps réel. Le code est chargé en mémoire, prêt à être activé
	\item État Prêt : La tache peut s'exécuter si le processeur est libre
	\item État Exécution : La tâche est en train de s'exécuter et à donc le contrôle du CPU
	\item État Attente : Si la tâche exige un évent pour s'activer
	\end{itemize}
	
	Dans un cas temps réel, la priorité rentre en jeu. Une tâche crée peut passer devant une tâche en train d'être exécutée si elle est plus prioritaire.
	
	\subsection{Comutation de contexte}
	
	Méchanisme de sauvegarde et de restauration des taches lors de l'échange de la tâche qui s'exécute. Cela doit être rapide. Elle est basée sur la TCB
	
	Le temps de commutation est un facteur crucial (temps de réponse)
	
	Sauver le strict minimum -> Threads. Le temps est lié à la quantité de registres à sauver et à restaurer par le CPU.
	
	\subsubsection{Déroulement de la commutation}
	\emph{Voir page 8 poly}
	
	\subsection{Thread}
	Thread = Petit processus de poids léger -> LWP (LightWeight Process)
	Unité de base d'utilisation de 'l'unité centrale propres :
	Compteur d'instruction, registres, pile d'exécution
	
	Mais il partage aussi avec les autres threads de la tâche (segments de code et données, fichiers ouverts, signaux)
	
	\subsection{Calssification des algorithmes d'ordonnancement}
	Hors ligne (calculé avant l'execution) ou en ligne (pris au cours de l'execution)
	
	Non Préemtifs (L'execution en cours ne peut être intérompue) ou préempifs (Changement de processus en fonction de la priorité)
	
	A priorité statique (à la création) ou dynamique (peut être changé pour les besoins de l'exécution (surtout à l'exécution))
	
	Taches Perdiodiques (activées régulièrement), apériodiques (aléatoire) ou sporadique (un temps minimal entre 2 exec est connu)
	
	\subsection{Principe d'un noyau non préemptif}
	
	Les tâches coopèrent pour partager l'UC. 
	Chaque tâche doit rendre explicitement le contrôle au CPU, le plus fréquement possible
	On interrompt jamais l'exécution d'une tâche.
	
	Points forts : Temps de latence des interruptions faibles
	Utilisation possible de fonctions non réentrantes (run-to-completion)
	
	Point faible : Non déterminisme, pb de temps de réaction
	
\end{document}